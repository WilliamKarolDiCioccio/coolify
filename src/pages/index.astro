---
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Coolify</title>
  </head>
  <body class="bg-gray-100 text-gray-800 flex flex-col items-center justify-center h-screen p-4">
    
    <!-- Main Container -->
    <div class="bg-white p-8 rounded-xl shadow-lg max-w-lg w-full">

      <!-- Title Section -->
      <h1 class="text-4xl font-bold text-center mb-6 text-blue-600">Coolify</h1>

      <!-- Input Form -->
      <form class="flex flex-col space-y-4">
        <textarea
          id="textInput"
          placeholder="Enter your text here..."
          rows="6"
          class="border border-gray-300 p-3 rounded-md w-full resize-none focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-300"
        ></textarea>

        <!-- Uncool Button -->
        <button
          id="uncoolButton"
          type="button"
          class="bg-blue-500 text-white px-6 py-3 rounded-md hover:bg-blue-600 transition duration-300"
        >
          Make it UNCOOL
        </button>
      </form>

      <!-- Output Section -->
      <p id="outputText" class="mt-6 bg-gray-100 p-4 rounded-md text-gray-700"></p>

    </div>

    <!-- Inspired by Video Section with Thumbnail -->
    <div class="mt-8 text-center">
      <p class="text-lg text-gray-600">
        Inspired by 
        <a href="https://www.youtube.com/watch?v=q1SWw7i9LQc" class="text-blue-600 hover:underline" target="_blank">this video</a>.
      </p>
      <!-- Video Thumbnail -->
      <a href="https://www.youtube.com/watch?v=q1SWw7i9LQc" target="_blank">
        <img src="https://img.youtube.com/vi/q1SWw7i9LQc/hqdefault.jpg" alt="YouTube Video Thumbnail" class="mt-4 rounded-lg shadow-lg hover:scale-105 transition duration-300" />
      </a>
    </div>
  </body>
</html>

<script lang="ts">
  let typoMap = {};

  async function loadTypoMap() {
    const response = await fetch('/typos.txt');
    const data = await response.text();

    const lines = data.split('\n');

    for (const line of lines) {
      const [typo, correct] = line.split('->').map(s => s.trim());

      if (!typoMap[correct]) {
        typoMap[correct] = [];
      }

      typoMap[correct].push(typo);
    }
  }

  function makeTextUncool(text) {
    const words = text.match(/(\w+|[^\w\s]+|\s+)/g) || [];

    return words
      .map(word => {
        if (word.match(/^[^\w\s]+$/)) {
          return word;
        }

        const lowerWord = word.toLowerCase();

        if (typoMap[word] && Math.random() > 0.7) {
          const typos = typoMap[word];
          return typos[Math.floor(Math.random() * typos.length)];
        } else if (typoMap[lowerWord] && Math.random() > 0.7) {
          const typos = typoMap[lowerWord];
          return typos[Math.floor(Math.random() * typos.length)];
        }

        return word;
    })
    .join('');
  }


  document.addEventListener('DOMContentLoaded', () => {
    loadTypoMap().then(() => {
      const uncoolButton = document.getElementById('uncoolButton');
      if (!uncoolButton) return;

      uncoolButton.addEventListener('click', () => {
        const textInput = document.getElementById('textInput');
        if (!textInput) return;

        const uncoolText = makeTextUncool(textInput.value);

        const textOutput = document.getElementById('outputText');
        if (!textOutput) return;

        textOutput.textContent = uncoolText;
      });
    });
  });
</script>